// -------------------------------------------------------------
// 
// File Name: D:\Desktop\2024_E_Design\2023C\matlab\hdlsrc\signalSim\WaveformGen.v
// Created: 2024-07-19 21:25:07
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: WaveformGen
// Source Path: signalSim/NCO/NCO1/WaveformGen
// Hierarchy Level: 2
// Model version: 1.10
// 
// Wave form Generation Component
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module WaveformGen
          (clk,
           reset,
           enb,
           phaseIdx,
           sine);


  input   clk;
  input   reset;
  input   enb;
  input   [11:0] phaseIdx;  // ufix12_E19
  output  signed [11:0] sine;  // sfix12_En10


  reg [11:0] phaseIdxReg;  // ufix12_E19
  wire selsign;  // ufix1
  reg  [2:0] SelsignRegister_reg;  // ufix1 [3]
  wire selsignreg;  // ufix1
  wire [10:0] lutaddrexd;  // ufix11
  wire addrOverFsin;  // ufix1
  reg  [2:0] AddrOverFsinRegister_reg;  // ufix1 [3]
  wire addrOverFsinreg;  // ufix1
  wire seladdr;  // ufix1
  wire [9:0] lutaddr1;  // ufix10
  wire [10:0] lutaddrmax;  // ufix11
  wire [11:0] subtractor_sub_temp;  // ufix12
  wire [11:0] subtractor_1;  // ufix12
  wire [11:0] subtractor_2;  // ufix12
  wire [9:0] lutaddr2;  // ufix10
  wire [9:0] lutaddrsin;  // ufix10
  wire signed [11:0] lutoutsin;  // sfix12_En10
  wire signed [11:0] ampOne;  // sfix12_En10
  wire signed [11:0] lutoutsin_ampOne;  // sfix12_En10
  wire signed [12:0] uminus_cast;  // sfix13_En10
  wire signed [12:0] uminus_cast_1;  // sfix13_En10
  wire signed [11:0] lutoutsin_ampOne_inv;  // sfix12_En10


  always @(posedge clk)
    begin : phaseIdxRegister_process
      if (reset == 1'b0) begin
        phaseIdxReg <= 12'b000000000000;
      end
      else begin
        if (enb) begin
          phaseIdxReg <= phaseIdx;
        end
      end
    end



  // Sine sign selection signal
  assign selsign = phaseIdxReg[11];



  always @(posedge clk)
    begin : SelsignRegister_process
      if (reset == 1'b0) begin
        SelsignRegister_reg <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          SelsignRegister_reg[0] <= selsign;
          SelsignRegister_reg[32'sd2:32'sd1] <= SelsignRegister_reg[32'sd1:32'sd0];
        end
      end
    end

  assign selsignreg = SelsignRegister_reg[2];



  // Get extended LUT address for overflow handling
  assign lutaddrexd = phaseIdxReg[10:0];



  // Detect sine overflow
  assign addrOverFsin = lutaddrexd == 11'b10000000000;



  always @(posedge clk)
    begin : AddrOverFsinRegister_process
      if (reset == 1'b0) begin
        AddrOverFsinRegister_reg <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          AddrOverFsinRegister_reg[0] <= addrOverFsin;
          AddrOverFsinRegister_reg[32'sd2:32'sd1] <= AddrOverFsinRegister_reg[32'sd1:32'sd0];
        end
      end
    end

  assign addrOverFsinreg = AddrOverFsinRegister_reg[2];



  assign seladdr = phaseIdxReg[10];



  assign lutaddr1 = phaseIdxReg[9:0];



  // Map LUT address in correct phase
  assign lutaddrmax = 11'b10000000000;



  assign subtractor_1 = {1'b0, lutaddrmax};
  assign subtractor_2 = {2'b0, lutaddr1};
  assign subtractor_sub_temp = subtractor_1 - subtractor_2;
  assign lutaddr2 = subtractor_sub_temp[9:0];



  assign lutaddrsin = (seladdr == 1'b0 ? lutaddr1 :
              lutaddr2);



  LookUpTableGen u_SineWave_inst (.clk(clk),
                                  .reset(reset),
                                  .enb(enb),
                                  .lutaddr(lutaddrsin),  // ufix10
                                  .lutoutput(lutoutsin)  // sfix12_En10
                                  );

  assign ampOne = 12'sb010000000000;



  // Assign sine amplitude One
  assign lutoutsin_ampOne = (addrOverFsinreg == 1'b0 ? lutoutsin :
              ampOne);



  assign uminus_cast = {lutoutsin_ampOne[11], lutoutsin_ampOne};
  assign uminus_cast_1 =  - (uminus_cast);
  assign lutoutsin_ampOne_inv = uminus_cast_1[11:0];



  // Select sign of Sine output
  assign sine = (selsignreg == 1'b0 ? lutoutsin_ampOne :
              lutoutsin_ampOne_inv);



endmodule  // WaveformGen

