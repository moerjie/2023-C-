// -------------------------------------------------------------
// 
// File Name: D:\Desktop\2024_E_Design\2023C\matlab\hdlsrc\signalSim\Cnt_sin2cos.v
// Created: 2024-07-17 10:47:47
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1e-06
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// CntOutPhaseShift              ce_out        1
// CntOut                        ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Cnt_sin2cos
// Source Path: signalSim/Cnt_sin2cos
// Hierarchy Level: 0
// Model version: 1.9
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Cnt_sin2cos
          (clk,
           reset,
           clk_enable,
           ce_out,
           CntOutPhaseShift,
           CntOut);


  input   clk;
  input   reset;
  input   clk_enable;
  output  ce_out;
  output  [15:0] CntOutPhaseShift;  // uint16
  output  [15:0] CntOut;  // uint16


  wire enb_1_1000000_0;
  wire HDL_Counter_ctrl_const_out;
  reg  HDL_Counter_ctrl_delay_out;
  wire [15:0] HDL_Counter_Initial_Val_out;  // uint16
  wire [15:0] count_step;  // uint16
  wire [15:0] count_from;  // uint16
  wire [15:0] HDL_Counter_out1;  // uint16
  wire [15:0] count;  // uint16
  wire need_to_wrap;
  wire [15:0] count_value;  // uint16
  reg [15:0] HDL_Counter_out;  // uint16
  wire HDL_Counter1_ctrl_const_out;
  reg  HDL_Counter1_ctrl_delay_out;
  wire [15:0] HDL_Counter1_Initial_Val_out;  // uint16
  wire [15:0] count_step_1;  // uint16
  wire [15:0] count_from_1;  // uint16
  wire [15:0] HDL_Counter1_out1;  // uint16
  wire [15:0] count_1;  // uint16
  wire need_to_wrap_1;
  wire [15:0] count_value_1;  // uint16
  reg [15:0] HDL_Counter1_out;  // uint16


  assign HDL_Counter_ctrl_const_out = 1'b1;



  assign enb_1_1000000_0 = clk_enable;

  always @(posedge clk)
    begin : HDL_Counter_ctrl_delay_process
      if (reset == 1'b0) begin
        HDL_Counter_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb_1_1000000_0) begin
          HDL_Counter_ctrl_delay_out <= HDL_Counter_ctrl_const_out;
        end
      end
    end



  assign HDL_Counter_Initial_Val_out = 16'b0000000000011001;



  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 1000
  assign count_step = 16'b0000000000000001;



  assign count_from = 16'b0000000000000001;



  assign count = HDL_Counter_out1 + count_step;



  assign need_to_wrap = HDL_Counter_out1 == 16'b0000001111101000;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  always @(posedge clk)
    begin : HDL_Counter_process
      if (reset == 1'b0) begin
        HDL_Counter_out <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_1000000_0) begin
          HDL_Counter_out <= count_value;
        end
      end
    end



  assign HDL_Counter_out1 = (HDL_Counter_ctrl_delay_out == 1'b0 ? HDL_Counter_Initial_Val_out :
              HDL_Counter_out);



  assign CntOutPhaseShift = HDL_Counter_out1;

  assign HDL_Counter1_ctrl_const_out = 1'b1;



  always @(posedge clk)
    begin : HDL_Counter1_ctrl_delay_process
      if (reset == 1'b0) begin
        HDL_Counter1_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb_1_1000000_0) begin
          HDL_Counter1_ctrl_delay_out <= HDL_Counter1_ctrl_const_out;
        end
      end
    end



  assign HDL_Counter1_Initial_Val_out = 16'b0000000000000001;



  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 1000
  assign count_step_1 = 16'b0000000000000001;



  assign count_from_1 = 16'b0000000000000001;



  assign count_1 = HDL_Counter1_out1 + count_step_1;



  assign need_to_wrap_1 = HDL_Counter1_out1 == 16'b0000001111101000;



  assign count_value_1 = (need_to_wrap_1 == 1'b0 ? count_1 :
              count_from_1);



  always @(posedge clk)
    begin : HDL_Counter1_process
      if (reset == 1'b0) begin
        HDL_Counter1_out <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_1000000_0) begin
          HDL_Counter1_out <= count_value_1;
        end
      end
    end



  assign HDL_Counter1_out1 = (HDL_Counter1_ctrl_delay_out == 1'b0 ? HDL_Counter1_Initial_Val_out :
              HDL_Counter1_out);



  assign CntOut = HDL_Counter1_out1;

  assign ce_out = clk_enable;

endmodule  // Cnt_sin2cos

